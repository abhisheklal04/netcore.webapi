/* 
 * Sample API
 *
 * Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
 *
 * OpenAPI spec version: 0.1.9
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UserStoryModel
    /// </summary>
    [DataContract]
    public partial class UserStoryModel :  IEquatable<UserStoryModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserStoryModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserStoryModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserStoryModel" /> class.
        /// </summary>
        /// <param name="userStory">userStory (required).</param>
        /// <param name="paging">paging (required).</param>
        public UserStoryModel(List<UserStory> userStory = default(List<UserStory>), Paging paging = default(Paging))
        {
            // to ensure "userStory" is required (not null)
            if (userStory == null)
            {
                throw new InvalidDataException("userStory is a required property for UserStoryModel and cannot be null");
            }
            else
            {
                this.UserStory = userStory;
            }

            // to ensure "paging" is required (not null)
            if (paging == null)
            {
                throw new InvalidDataException("paging is a required property for UserStoryModel and cannot be null");
            }
            else
            {
                this.Paging = paging;
            }

        }
        
        /// <summary>
        /// Gets or Sets UserStory
        /// </summary>
        [DataMember(Name="userStory", EmitDefaultValue=false)]
        public List<UserStory> UserStory { get; set; }

        /// <summary>
        /// Gets or Sets Paging
        /// </summary>
        [DataMember(Name="paging", EmitDefaultValue=false)]
        public Paging Paging { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserStoryModel {\n");
            sb.Append("  UserStory: ").Append(UserStory).Append("\n");
            sb.Append("  Paging: ").Append(Paging).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserStoryModel);
        }

        /// <summary>
        /// Returns true if UserStoryModel instances are equal
        /// </summary>
        /// <param name="input">Instance of UserStoryModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserStoryModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserStory == input.UserStory ||
                    this.UserStory != null &&
                    this.UserStory.SequenceEqual(input.UserStory)
                ) && 
                (
                    this.Paging == input.Paging ||
                    (this.Paging != null &&
                    this.Paging.Equals(input.Paging))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserStory != null)
                    hashCode = hashCode * 59 + this.UserStory.GetHashCode();
                if (this.Paging != null)
                    hashCode = hashCode * 59 + this.Paging.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
