/* 
 * Sample API
 *
 * Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
 *
 * OpenAPI spec version: 0.1.9
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// IssuesResponse
    /// </summary>
    [DataContract]
    public partial class IssuesResponse :  IEquatable<IssuesResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuesResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IssuesResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuesResponse" /> class.
        /// </summary>
        /// <param name="issues">issues (required).</param>
        public IssuesResponse(List<Issue> issues = default(List<Issue>))
        {
            // to ensure "issues" is required (not null)
            if (issues == null)
            {
                throw new InvalidDataException("issues is a required property for IssuesResponse and cannot be null");
            }
            else
            {
                this.Issues = issues;
            }

        }
        
        /// <summary>
        /// Gets or Sets Issues
        /// </summary>
        [DataMember(Name="issues", EmitDefaultValue=false)]
        public List<Issue> Issues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IssuesResponse {\n");
            sb.Append("  Issues: ").Append(Issues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IssuesResponse);
        }

        /// <summary>
        /// Returns true if IssuesResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of IssuesResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssuesResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Issues == input.Issues ||
                    this.Issues != null &&
                    this.Issues.SequenceEqual(input.Issues)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Issues != null)
                    hashCode = hashCode * 59 + this.Issues.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
